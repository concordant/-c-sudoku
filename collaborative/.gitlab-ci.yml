image: node:14.16.0

stages:
  - build
  - test
  - predeploy
  - deploy

cache: &global_cache # per-branch cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - collaborative/.npm/
  # make push explicit
  policy: pull

build:
  stage: build
  before_script:
    - cd collaborative
  script:
    - npm ci --cache .npm --prefer-offline
    # prepare script is skipped by install/ci when running NPM 6 as root.
    # This line can be safely removed with NPM 7+ (see NPM Changelog)
    - npm run prepare
    # Build demo application
    # Still some ESlint warnings to be fixed: disable ESlint at this stage
    - DISABLE_ESLINT_PLUGIN=true npm run build
  artifacts:
    paths:
      - collaborative/node_modules/
      - collaborative/build/
    expire_in: 3 days
  cache:
    <<: *global_cache
    policy: pull-push

test:
  stage: test
  # node 15+ has bug #2143 : https://github.com/npm/cli/issues/2143
  image: node:14.16.0
  variables:
    COUCHDB_HOST: couchdb
    COUCHDB_PORT: 5984
    COUCHDB_URL: http://$COUCHDB_HOST:$COUCHDB_PORT/
    COUCHDB_USER: admin
    COUCHDB_PASSWORD: "admin"

  services:
    - couchdb:latest

  before_script:
    - cd collaborative
    # setup couchdb
    - curl -su "$COUCHDB_USER:$COUCHDB_PASSWORD"
      -X PUT $COUCHDB_URL/_users
    # run c-service in background
    - npx @concordant/c-service &

  script:
    - npm test

  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - collaborative/coverage/

# Filter out node_modules from build artifacts to speed up deploy.
# Gitlab 13.10 will allow to use multiple cache instead.
pre-deploy:
  stage: predeploy
  rules:
    - if: "$CI_COMMIT_BRANCH"
  # use only artifacts from build job
  dependencies:
    - build
  # cache is not needed: don't download
  cache: {}
  # don't download repository content
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - collaborative/build/
  # script is required
  script:
    - echo Exporting collaborative/build/â€¦

deploy_review:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_BRANCH"
  tags:
    - webserver
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://demo.concordant.io/c-sudoku_${CI_ENVIRONMENT_SLUG}/
    on_stop: stop_review
  # use only artifacts from pre-deploy job
  dependencies:
    - pre-deploy
  # cache and repository art not needed: don't download
  cache: {}
  variables:
    GIT_STRATEGY: none
  script:
    - rm -rf /var/www/demo.concordant.io/html/c-sudoku_${CI_ENVIRONMENT_SLUG}
    - mv collaborative/build /var/www/demo.concordant.io/html/c-sudoku_${CI_ENVIRONMENT_SLUG}

stop_review:
  stage: deploy
  rules:
    - if: "$CI_COMMIT_BRANCH"
      when: manual
      allow_failure: true
  tags:
    - webserver
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  # artifacts, cache and repository are not needed: don't download
  dependencies: []
  cache: {}
  variables:
    GIT_STRATEGY: none
  script:
    - rm -rf /var/www/demo.concordant.io/html/c-sudoku_${CI_ENVIRONMENT_SLUG}

deploy_live:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: manual
  tags:
    - webserver
  environment:
    name: live
    url: https://demo.concordant.io/c-sudoku/
  # use only artifacts from pre-deploy job
  dependencies:
    - pre-deploy
  # cache and repository art not needed: don't download
  cache: {}
  variables:
    GIT_STRATEGY: none
  script:
    - rm -rf /var/www/demo.concordant.io/html/c-sudoku
    - mv collaborative/build /var/www/demo.concordant.io/html/c-sudoku
